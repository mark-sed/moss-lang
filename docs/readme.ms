#!/usr/bin/moss
@!enable_code_output

md"""
# üåø Moss

Moss is a modern interpreted language with a simple C-style syntax.

Moss natively supports generation of output in many formats, such as Markdown,
HTML and others. New formats and convertors can be also easily added.

Moss can also be compiled into bytecode for faster execution or non-source
sharing.

This document was also generated by Moss and all code examples are run in
"notebook" mode and output shown.
"""

md"""
# üí° Language examples

The example bellow showcases some nice Moss features, such as typed function
arguments, ranges (`start..end`), calls to standard library functions (`sum` in
space `Math`), list comprehension, documentation strings and outputting.
"""

fun normalized_squares(start:Int, end:Int) {
    d"""
    Return list of squared numbers normalized to sum to 1.
    Numbers are in a range from `start` to `end`.
    """
    squares = [x^2 : x = start..end]
    total = Math.sum(squares)
    return [x / Float(total) : x = squares]
}

normalized_squares(1, 6)

md"""
As seen above in output for this function the return value was outputted.
This is a big feature of Moss, where standalone expressions are outputted in
specified format (in this case "text"). This is great for creating interactive
notebooks and documents with runnable code that is recomputed on every
generation. On top of that this output can be then easily converted to other
formats (by specifying `-f` option followed by the desired format).
"""

md"""
## üìö Other useful resources

* [Language reference documentation](https://github.com/mark-sed/moss-lang/tree/main/docs/language-reference)
* [Wiki pages](https://github.com/mark-sed/moss-lang/wiki)
"""

md"""
## üõ†Ô∏è Building Moss

Moss can be built and run on Linux and Windows. On Max it should be possible,
but is not tested yet.

### üì¶ Requirement
* C++17 compatible compiler (gcc, clang)
* CMake

### ‚öôÔ∏è Build

Clone this git repository:
```sh
git clone --recursive https://github.com/mark-sed/moss-lang.git
cd moss-lang
```

Moss can be built using CMake with specified targets or on Linux using pre-made
`install.sh` script. This script requires sudo privileges to install into
`/usr/` and `/bin/`:
```sh
sudo bash instal.sh
```

With CMake it can be done with target `moss` and `libms`. If you wish to also
install it onto correct path (to have command `moss`) you can use `installation`
target.

__On Linux:__
```sh
cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
cmake --build build -j $(nproc) --target moss libms
sudo cmake --build build -j $(nproc) --target installation
```

__On Windows:__

Open `Developer Command Prompt` and navigate into cloned moss-lang directory. 
```sh
cmake -S . -B build
cmake --build build --config Release --target moss libms installation
```

You can test this with:
```sh
# On Linux
./build/moss --version

# On Windows
build\\Release\\moss.exe --version
```
"""

import sys.version
import time.strftime

Note(
    f"""
-----
This file was generated on {strftime("%b %d %Y")} by 
[Moss](https://github.com/mark-sed/moss-lang) {version} from 
[readme.ms](https://github.com/mark-sed/moss-lang/blob/main/docs/readme.ms).
""", "md")