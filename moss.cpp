#include "moss.hpp"
#include "scanner.hpp"
#include "source.hpp"
#include "os_interface.hpp"
#include "clopts.hpp"
#include "args.hpp"
#include "parser.hpp"
#include "repl.hpp"
#include "logging.hpp"
#include "bytecodegen.hpp"
#include "bytecode.hpp"
#include "interpreter.hpp"
#include <iostream>

#include "bytecode_reader.hpp"
#include "bytecode_writer.hpp"
#include "opcode.hpp"

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)
#include <Windows.h>
#endif

using namespace moss;

static SourceFile get_input() {
    if (clopts::file_name)
        return SourceFile(args::get(clopts::file_name), SourceFile::SourceType::FILE);
    if (clopts::code)
        return SourceFile(args::get(clopts::code), SourceFile::SourceType::STRING);
    if (is_stdin_atty())
        return SourceFile(SourceFile::SourceType::REPL);
    return SourceFile(SourceFile::SourceType::STDIN);
}


int main(int argc, const char *argv[]) {
    // On Windows we need to set the output to accept utf8 strings
#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)
    // Set console code page to UTF-8 so console known how to interpret string data
    SetConsoleOutputCP(CP_UTF8);
    // Enable buffering to prevent VS from chopping up UTF-8 byte sequences
    setvbuf(stdout, nullptr, _IOFBF, 1000);
#endif

    clopts::parse_clopts(argc, argv);

    if(clopts::get_logging_level() > 0) {
        // Enable logging
        Logger::get().set_logging_level(clopts::get_logging_level());
        Logger::get().set_flags(std::ios_base::boolalpha);
        Logger::get().set_log_everything(clopts::get_logging_list() == "all");
        Logger::get().set_enabled(utils::split_csv_set(clopts::get_logging_list()));
    }

    LOG1("Moss " << MOSS_VERSION);
    LOG1("Logging enabled with level: " << clopts::get_logging_level());
    LOG5("Unicode output test (sushi emoji, umlaut u and japanese): " << "🍣 ü ラーメン");

    auto main_file = get_input();

    // REPL
    if (main_file.get_type() == SourceFile::SourceType::REPL) {
        Repl repl(main_file);
        repl.run();
        return 0;
    }

    Parser parser(main_file);
    auto main_mod = parser.parse(true);

#ifndef NDEBUG
    if (clopts::parse_only) {
        delete main_mod;
        return 0;
    }
#endif

    //LOGMAX("Parsed: " << *main_mod);

    Bytecode *bc = new Bytecode();
    bcgen::BytecodeGen cgen(bc);

    cgen.generate(main_mod);

    LOGMAX("Generated bytecode: \n" << *bc);

    Interpreter *interpreter = new Interpreter(bc, &main_file);
    interpreter->run();

    //LOGMAX(*interpreter);
    int exit_code = interpreter->get_exit_code();

    delete interpreter;
    delete main_mod;

    return exit_code;
}